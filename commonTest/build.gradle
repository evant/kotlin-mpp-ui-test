apply plugin: 'com.android.library'
apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlin-native-cocoapods'

version '1.0'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }
}

kotlin {
    targets {
//        def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos")   \
//                                ? presets.iosArm64 : presets.iosX64
        def iOSTarget = presets.iosX64

        String[] frameworkSearchPaths = property('kotlin.native.cocoapods.paths.frameworks')
                .split(" ")
                .findAll { !it.isEmpty() }
                .collect { it.replaceAll("^\"|\"\$", "") }

        def frameworksDir = new File(frameworkSearchPaths[0]).absolutePath

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('CommonTest')
            }

            compilations.main {
                it.cinterops {
                    xctest {
                        compilerOpts "-F${frameworksDir} -framework XCTest"
                        linkerOpts "-F${frameworksDir} -framework XCTest"

                        includeDirs "${frameworksDir}/XCTest.framework"
                    }
                }
            }
        }
    }

    android()

    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            api 'org.jetbrains.kotlin:kotlin-test-common'
            api 'org.jetbrains.kotlin:kotlin-test-annotations-common'
        }

        androidMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib'
            api 'org.jetbrains.kotlin:kotlin-test-junit'
            api 'androidx.test.ext:junit:1.1.1'
            api 'androidx.test.espresso:espresso-core:3.2.0'
        }
    }

    cocoapods {
        // Configure fields required by CocoaPods.
        summary = "Common Tests"
        homepage = "TODO"

//        pod('EarlGrey', '~> 1.15.1')
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

task iosTest(type: Exec) {
    dependsOn(linkTestDebugExecutableIos)
    def testExecutable = linkTestDebugExecutableIos.outputFile
    inputs.file(testExecutable)
    configure {
        commandLine("xcrun", "simctl", "spawn", "iPhone 8", testExecutable.get())
    }
}
